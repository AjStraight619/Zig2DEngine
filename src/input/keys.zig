const rl = @import("raylib");

/// Clean key enum that wraps raylib keys
/// Users use this instead of importing raylib directly
pub const Key = enum {
    // Letters
    a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    i,
    j,
    k,
    l,
    m,
    n,
    o,
    p,
    q,
    r,
    s,
    t,
    u,
    v,
    w,
    x,
    y,
    z,

    // Numbers
    zero,
    one,
    two,
    three,
    four,
    five,
    six,
    seven,
    eight,
    nine,

    // Arrow keys
    up,
    down,
    left,
    right,

    // Function keys
    f1,
    f2,
    f3,
    f4,
    f5,
    f6,
    f7,
    f8,
    f9,
    f10,
    f11,
    f12,

    // Special keys
    space,
    enter,
    escape,
    backspace,
    tab,
    delete,
    insert,
    home,
    end,
    page_up,
    page_down,

    // Modifiers
    left_shift,
    right_shift,
    left_ctrl,
    right_ctrl,
    left_alt,
    right_alt,

    // Punctuation and symbols
    minus,
    equal,
    left_bracket,
    right_bracket,
    backslash,
    semicolon,
    apostrophe,
    comma,
    period,
    slash,
    grave,

    // Numpad
    numpad_0,
    numpad_1,
    numpad_2,
    numpad_3,
    numpad_4,
    numpad_5,
    numpad_6,
    numpad_7,
    numpad_8,
    numpad_9,
    numpad_decimal,
    numpad_divide,
    numpad_multiply,
    numpad_subtract,
    numpad_add,
    numpad_enter,

    /// Convert our clean Key enum to raylib's KeyboardKey
    pub fn toRaylib(self: Key) rl.KeyboardKey {
        return switch (self) {
            // Letters
            .a => .a,
            .b => .b,
            .c => .c,
            .d => .d,
            .e => .e,
            .f => .f,
            .g => .g,
            .h => .h,
            .i => .i,
            .j => .j,
            .k => .k,
            .l => .l,
            .m => .m,
            .n => .n,
            .o => .o,
            .p => .p,
            .q => .q,
            .r => .r,
            .s => .s,
            .t => .t,
            .u => .u,
            .v => .v,
            .w => .w,
            .x => .x,
            .y => .y,
            .z => .z,

            // Numbers
            .zero => .zero,
            .one => .one,
            .two => .two,
            .three => .three,
            .four => .four,
            .five => .five,
            .six => .six,
            .seven => .seven,
            .eight => .eight,
            .nine => .nine,

            // Arrow keys
            .up => .up,
            .down => .down,
            .left => .left,
            .right => .right,

            // Function keys
            .f1 => .f1,
            .f2 => .f2,
            .f3 => .f3,
            .f4 => .f4,
            .f5 => .f5,
            .f6 => .f6,
            .f7 => .f7,
            .f8 => .f8,
            .f9 => .f9,
            .f10 => .f10,
            .f11 => .f11,
            .f12 => .f12,

            // Special keys
            .space => .space,
            .enter => .enter,
            .escape => .escape,
            .backspace => .backspace,
            .tab => .tab,
            .delete => .delete,
            .insert => .insert,
            .home => .home,
            .end => .end,
            .page_up => .page_up,
            .page_down => .page_down,

            // Modifiers
            .left_shift => .left_shift,
            .right_shift => .right_shift,
            .left_ctrl => .left_control,
            .right_ctrl => .right_control,
            .left_alt => .left_alt,
            .right_alt => .right_alt,

            // Punctuation and symbols
            .minus => .minus,
            .equal => .equal,
            .left_bracket => .left_bracket,
            .right_bracket => .right_bracket,
            .backslash => .backslash,
            .semicolon => .semicolon,
            .apostrophe => .apostrophe,
            .comma => .comma,
            .period => .period,
            .slash => .slash,
            .grave => .grave,

            // Numpad
            .numpad_0 => .kp_0,
            .numpad_1 => .kp_1,
            .numpad_2 => .kp_2,
            .numpad_3 => .kp_3,
            .numpad_4 => .kp_4,
            .numpad_5 => .kp_5,
            .numpad_6 => .kp_6,
            .numpad_7 => .kp_7,
            .numpad_8 => .kp_8,
            .numpad_9 => .kp_9,
            .numpad_decimal => .kp_decimal,
            .numpad_divide => .kp_divide,
            .numpad_multiply => .kp_multiply,
            .numpad_subtract => .kp_subtract,
            .numpad_add => .kp_add,
            .numpad_enter => .kp_enter,
        };
    }
};
